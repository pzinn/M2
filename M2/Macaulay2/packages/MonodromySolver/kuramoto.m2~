installPackage("MonodromySolver",FileName=>"../MonodromySolver.m2",RerunExamples=>true)
needsPackage "MonodromySolver"

gaussCC = () -> (
    (u1,u2):=(random RR,random RR);
    sqrt(-2*log(u1))*cos(2*pi*u2)+ii*sqrt(-2*log(u1))*sin(2*pi*u2)
    )

rNorm = (mu,var) -> mu+var*(realPart gaussCC())_CC

-- n = dim(sphere)+1, r = radius
sphere = (n,r) -> (
    l:=apply(n,i->rNorm(0,1));
    r/(sum apply(l,i->i^2))*l
    )

cauchy = () -> rNorm(0,1)/rNorm(0,1)

logCauchy = () -> exp cauchy()

m=n-1
R=CC[toList(a_1..a_m)|flatten for i from 0 to m list for j from i to m list B_({i,j})][s_1..s_m,c_1..c_m]
nParams=numgens coefficientRing R;
nVars=numgens R
topEqs=apply(toList(1..m),i->a_i-sum apply(toList(1..m),j->B_(sort{i,j})*(s_i*c_j-s_j-c_i*s_j)))
bottomEqs=apply(toList(1..m),i->c_i^2+s_i^2-1)
PS=polySystem(topEqs|bottomEqs)
zs=apply(m,i->random CC)
rs=apply(zs,z->(realPart z)_CC)
is=apply(zs,z->(imaginaryPart z)_CC)
seedSC=rs|is

end
uninstallPackage "MonodromySolver"
restart
n=7
setRandomSeed 0
needs "kuramoto.m2"

(p0,v0)=createSeedPair(PS,seedSC)
status v0

G=PS
L=seedSC
SubList := apply(toList(0..numgens ring G-1), i -> (gens ring G)#i => L#i);
          subZeros := apply(gens coefficientRing ring G, g -> g => 0);
          C := coefficientRing ring G;
          M := sub(sub(G.PolyMap, SubList), C);
          M = flatten entries generators ideal M; 
          b := sub(matrix {apply(M, m-> sub(m, subZeros))}, coefficientRing coefficientRing ring G);
          l := apply(M, g -> (coefficients(g, Monomials => gens C))#1);
          A := l#0;
          for i from 1 to length l - 1 do A = A | l#i;
          A = sub(A, coefficientRing coefficientRing ring G);
          K := numericalKernel(transpose A, 1e-6);
          offset := solve(transpose A,transpose b,ClosestFit=>true);
          w := transpose randomWeights(numcols K);
          v := K * w - offset;
          c0 := point matrix v;
          pre0 := point{apply(SubList, i -> i#1)};
          G0 := specializeSystem(c0,G);
evaluate(polySystem G0,pre0)
          pre0' := first refine(G0,{pre0});
          (c0,pre0')
          

netList specializeSystem(p0,PS)
netList flatten entries evaluate(polySystem specializeSystem(p0,PS),v0)
elapsedTime (V,npaths)=monodromySolve(PS,p0,{v0},"new tracking routine"=>false,Verbose=>true)
# points V.PartialSols